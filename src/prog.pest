SP = _{SPACE_SEPARATOR*}

DecNum = { ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) }
HexNum = { "0x" ~ ASCII_HEX_DIGIT+ }
Num = { DecNum | HexNum }

Ident = {!ASCII_DIGIT ~ (!(SEPARATOR|";") ~ ANY)*}

Op = { "+" }
IdentOrNum = _{ (Ident | Num) }
TrueExpr = { IdentOrNum ~ Op ~ Expr }
Expr = { IdentOrNum | TrueExpr }
CompOp = { ("<" | ">" | "<=" | ">=" | "!=" | "==") }
CompExpr = { Expr ~ CompOp ~ Expr }

StringContent = {(!"\"" ~ ANY)*}
String = _{ "\"" ~ StringContent ~ "\"" }

Print = { ^"Print" ~ SP ~ String } // show string
Sub = { ^"Sub" ~ SP ~ Ident } // start of subroutine definition
Call = { ^"Call" ~ SP ~ Ident } // call subroutine
While = { ^"While" ~ SP ~ CompExpr } // start of while
Let = { ^"Let" ~ SP ~ Ident ~ SP ~ ^"Be" ~ Expr } // variable declaration
LetMut = { ^"LetMut" ~ SP ~ Ident ~ SP ~ ^"Be" ~ Expr } // variable declaration (mutable)
Modify = { ^"Modify" ~ SP ~ Ident ~ "To" ~ Expr } // variable modification
End = { ^"End" } // end of something

StmtTypes = _{ (Print | Sub | Call | While | Let | Modify | End ) }
Statement = _{ SP ~ StmtTypes ~ ";" ~ (SPACE_SEPARATOR | NEWLINE)*}
Prog = _{ SOI ~ Statement* ~ EOI }
