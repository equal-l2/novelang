SP = _{SPACE_SEPARATOR+}

Num = { "0" | (ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) }

IdentChars = _{!(SEPARATOR|";"|"<"|">"|"="|"!"|","|"+"|"-"|"*"|"/"|"%") ~ ANY}
Ident = {(!ASCII_DIGIT ~ IdentChars) ~ IdentChars*}

Plus = { "+" }
Minus = { "-" }
Times = { "*" }
Div = { "/" }
Mod = { "%" }

Op = _{ Plus | Minus | Times | Div | Mod }

IdentOrNum = { Ident | Num }
ExprUnit = { "(" ~ Expr ~ ")" | IdentOrNum }
Expr = { ExprUnit ~ ( SP? ~ Op ~ SP? ~ ExprUnit )* }

CompOp = { "==" | "!=" | "<=" | ">=" | "<" | ">" }
CompExpr = { Expr ~ SP? ~ CompOp ~ SP? ~ Expr }

StringContent = {(!"\"" ~ ANY)*}
String = _{ "\"" ~ StringContent ~ "\"" }

StrOrExpr = _{ String | Expr }

MutMark = { ^"AsMut" }

Print = { ^"Print" ~ SP ~ StrOrExpr ~ SP? ~ ("," ~ SP? ~ StrOrExpr ~ SP?)* } // show string and expr value
Sub = { ^"Sub" ~ SP ~ Ident } // start of subroutine definition
Call = { ^"Call" ~ SP ~ Ident } // call subroutine
While = { ^"While" ~ SP ~ CompExpr } // start of while
Let = { ^"Let" ~ SP ~ Ident ~ SP ~ ^"Be" ~ SP ~ Expr ~ (SP ~ MutMark)? } // variable declaration
Modify = { ^"Modify" ~ SP ~ Ident ~ SP ~ ^"To" ~ SP ~ Expr } // variable modification
Input = { ^"Input" } // input
If = { ^"If" ~ SP ~ CompExpr } // if
ElIf = { ^"ElIf" ~ SP ~ CompExpr } // if
Else = { ^"Else" } // else
End = { ^"End" } // end of something
Roll = { ^"Roll" ~ SP ~ Expr ~ SP ~ ^"Dice" ~ ^"s"? ~ SP? ~ ^"With" ~ SP ~ Expr ~ SP ~ ^"Face" ~ ^"s"? }
Halt = { ^"Halt"}

StmtTypes = _{ Print | Sub | Call | While | Let | Modify | Input | If | ElIf | Else | End | Roll | Halt }
Statement = _{ SP? ~ StmtTypes ~ ";" ~ SP?}
Comment = {"#" ~ (!NEWLINE ~ ANY)* }
Line = _{ SP? ~ (Comment | Statement+)? ~ NEWLINE }
Prog = _{ SOI ~ Line* ~ EOI }
