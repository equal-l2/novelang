SP = _{SPACE_SEPARATOR*}

Num = { "0" | (ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) }

IdentChars = _{!(SEPARATOR|";"|"<"|">"|"="|"!"|"+"|",") ~ ANY}
Ident = {(!ASCII_DIGIT ~ IdentChars) ~ IdentChars*}

Op = { "+" }
IdentOrNum = _{ Ident | Num }
TrueExpr = { IdentOrNum ~ SP ~ Op ~ SP ~ Expr }
Expr = { TrueExpr | IdentOrNum }
CompOp = { "<" | ">" | "<=" | ">=" | "!=" | "==" }
CompExpr = { Expr ~ SP ~ CompOp ~ SP ~ Expr }

StringContent = {(!"\"" ~ ANY)*}
String = _{ "\"" ~ StringContent ~ "\"" }

Print = { ^"Print" ~ SP ~ String } // show string
Sub = { ^"Sub" ~ SP ~ Ident } // start of subroutine definition
Call = { ^"Call" ~ SP ~ Ident } // call subroutine
While = { ^"While" ~ SP ~ CompExpr } // start of while
Let = { ^"Let" ~ SP ~ Ident ~ SP ~ ^"Be" ~ SP ~ Expr } // variable declaration
LetMut = { ^"LetMut" ~ SP ~ Ident ~ SP ~ ^"Be" ~ SP ~ Expr } // variable declaration (mutable)
Modify = { ^"Modify" ~ SP ~ Ident ~ SP ~ ^"To" ~ SP ~ Expr } // variable modification
End = { ^"End" } // end of something

StmtTypes = _{ Print | Sub | Call | While | Let | LetMut | Modify | End }
Statement = _{ SP ~ StmtTypes ~ ";" ~ (SPACE_SEPARATOR | NEWLINE)*}
Prog = _{ SOI ~ Statement* ~ EOI }
