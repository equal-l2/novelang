SP = _{SPACE_SEPARATOR+}

Num = { "0" | (ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) }

IdentChars = _{!(SEPARATOR|";"|"<"|">"|"="|"!"|"+"|",") ~ ANY}
Ident = {(!ASCII_DIGIT ~ IdentChars) ~ IdentChars*}

Op = { "+" }
IdentOrNum = { Ident | Num }
TrueExpr = { IdentOrNum ~ SP? ~ Op ~ SP? ~ Expr }
Expr = { TrueExpr | IdentOrNum }
CompOp = { "<" | ">" | "<=" | ">=" | "!=" | "==" }
CompExpr = { Expr ~ SP? ~ CompOp ~ SP? ~ Expr }

StringContent = {(!"\"" ~ ANY)*}
String = _{ "\"" ~ StringContent ~ "\"" }

StrOrExpr = _{ String | Expr }

MutMark = { ^"AsMut" }

Print = { ^"Print" ~ SP ~ StrOrExpr ~ SP? ~ ("," ~ SP? ~ StrOrExpr ~ SP?)* } // show string and expr value
Sub = { ^"Sub" ~ SP ~ Ident } // start of subroutine definition
Call = { ^"Call" ~ SP ~ Ident } // call subroutine
While = { ^"While" ~ SP ~ CompExpr } // start of while
Let = { ^"Let" ~ SP ~ Ident ~ SP ~ ^"Be" ~ SP ~ Expr ~ (SP ~ MutMark)? } // variable declaration
Modify = { ^"Modify" ~ SP ~ Ident ~ SP ~ ^"To" ~ SP ~ Expr } // variable modification
Input = { ^"Input" ~ SP ~ ^"To" ~ SP ~ Ident } // input
If = { ^"If" ~ SP ~ CompExpr } // if
Else = { ^"Else" } // else
End = { ^"End" } // end of something

StmtTypes = _{ Print | Sub | Call | While | Let | Modify | Input | If | Else | End }
Statement = _{ SP? ~ StmtTypes ~ ";" ~ (SPACE_SEPARATOR | NEWLINE)*}
Prog = _{ SOI ~ Statement* ~ EOI }
